import { Bot } from 'grammy';
import { fetchTopProducts } from './scraper.ts';
import { readState, writeState } from './storage.ts';
import { CustomContext, Product } from './types.ts';
import { config } from './config.ts';

const MONITORING_INTERVAL = 15000;

function formatPriceChangeMessage(oldPrice: number, newPrice: number, product: Product): string {
    const diff = Math.abs(oldPrice - newPrice);
    const link = `https://plati.market${product.href}`;
    if (newPrice < oldPrice) {
        return `üìâ <b>–¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ ${diff} —Ä—É–±.!</b>\n\n` +
            `<b>${product.name}</b>\n` +
            `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${product.seller}\n\n` +
            `–ë—ã–ª–æ: ${oldPrice} —Ä—É–±.\n<b>–°—Ç–∞–ª–æ: ${newPrice} —Ä—É–±.</b>\n\n` +
            `<a href="${link}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>`;
    } else {
        return `üìà <b>–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ ${diff} —Ä—É–±.</b>\n\n` +
            `<b>${product.name}</b>\n` +
            `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${product.seller}\n\n` +
            `–ë—ã–ª–æ: ${oldPrice} —Ä—É–±.\n<b>–°—Ç–∞–ª–æ: ${newPrice} —Ä—É–±.</b>\n\n` +
            `<a href="${link}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>`;
    }
}

function formatNewProductMessage(newProduct: Product, oldProduct?: Product): string {
    const link = `https://plati.market${newProduct.href}`;
    let message = `üÜï <b>–ù–æ–≤–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n` +
        `<b>${newProduct.name}</b>\n` +
        `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${newProduct.seller}\n` +
        `–¶–µ–Ω–∞: <b>${newProduct.price} —Ä—É–±.</b>\n\n`;
    if (oldProduct) {
        message += `<i>–≠—Ç–æ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (${oldProduct.price} —Ä—É–±.)</i>\n\n`;
    }
    message += `<a href="${link}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>`;
    return message;
}

async function checkPrices(bot: Bot<CustomContext>) {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...');
    const state = readState();
    const newProducts = await fetchTopProducts();

    if (newProducts.length === 0) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.');
        return;
    }

    const newTopProduct = newProducts[0];
    const oldTopProduct = state.lastKnownProducts?.[0];

    let message = '';

    if (!oldTopProduct) {
        console.log('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω.');
        writeState({ ...state, lastKnownProducts: newProducts });
        return;
    }

    if (newTopProduct.price <= state.limit) {
        if (newTopProduct.name === oldTopProduct.name) {
            if (newTopProduct.price !== oldTopProduct.price) {
                message = formatPriceChangeMessage(oldTopProduct.price, newTopProduct.price, newTopProduct);
            }
        } else {
            message = formatNewProductMessage(newTopProduct, oldTopProduct);
        }
    }

    if (message) {
        try {
            await bot.api.sendMessage(config.receiverId, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
        }
    }

    writeState({ ...state, lastKnownProducts: newProducts });
}

export function startMonitoring(bot: Bot<CustomContext>) {
    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω.');
    checkPrices(bot);
    setInterval(() => checkPrices(bot), MONITORING_INTERVAL);
}
