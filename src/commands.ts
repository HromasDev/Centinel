import { Bot } from 'grammy';
import { readState, writeState } from './storage.ts';
import { CustomContext } from './types.ts';
import { fetchTopProducts } from './scraper.ts';

export function setupCommands(bot: Bot<CustomContext>) {

  bot.command(['start', 'help'], (ctx) => {
    ctx.reply(
      '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n' +
      '<code>/help</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
      '<code>/prices</code> - –ü–æ–∫–∞–∑–∞—Ç—å 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n' +
      '<code>/limit N</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/limit 1000</code>)\n' +
      '<code>/compact</code> - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º',
      { parse_mode: 'HTML' }
    );
  });

  bot.command('prices', async (ctx) => {
    await ctx.reply('üîç –ò—â—É —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Plati.market...');

    const products = await fetchTopProducts();

    if (!products || products.length === 0) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
      return;
    }

    const productMessages = products.map((p, index) => {
      const link = `https://plati.market${p.href}`;

      return `${index + 1}. <b><a href="${link}">${p.name}</a></b>\n` +
        `   üí∞ –¶–µ–Ω–∞: <b>${p.price} ‚ÇΩ</b>\n` +
        `   üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${p.seller}\n` +
        `   üìä –ü—Ä–æ–¥–∞–Ω–æ: ${p.sales}`;
    }).join('\n\n');

    const finalMessage = `<b>üî• –¢–æ–ø-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n\n${productMessages}`;

    await ctx.reply(finalMessage, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
  });

  bot.command('limit', (ctx) => {
    const priceLimit = parseInt(ctx.match, 10);
    const state = readState();

    if (!isNaN(priceLimit) && priceLimit > 0) {
      state.limit = priceLimit;
      writeState(state);
      ctx.reply(`‚úÖ –õ–∏–º–∏—Ç —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${priceLimit} —Ä—É–±.`);
    } else {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/limit –ß–ò–°–õ–û</code>', { parse_mode: 'HTML' });
    }
  });

  bot.command('compact', (ctx) => {
    const state = readState();
    state.compact = !state.compact;
    writeState(state);

    if (state.compact) {
      ctx.reply('‚úÖ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω.');
    } else {
      ctx.reply('‚ùå –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω.');
    }
  });
}
